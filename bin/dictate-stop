#!/bin/bash
# Stop recording and transcribe on key release

CACHE_DIR="$HOME/.cache/dictate"
RECORDING_PIDFILE="$CACHE_DIR/recording.pid"
TSV_FILE="$CACHE_DIR/data.tsv"

# Check if recording pidfile exists
if [ ! -f "$RECORDING_PIDFILE" ]; then
    keyboard-reset
    exit 1
fi

# Read sox PID and filename
read SOX_PID WAVFILE < "$RECORDING_PIDFILE"
rm -f "$RECORDING_PIDFILE"

# Set A key amber (processing)
keyboard-notify --color 255,191,0 A

# Kill sox recording
kill $SOX_PID 2>/dev/null || true
sleep 0.1

# Check if WAV file exists and has content
if [ ! -s "$WAVFILE" ]; then
    keyboard-reset
    exit 1
fi

# Send to Whisper server for transcription (OpenAI-compatible endpoint)
RESPONSE=$(curl -s -X POST -F "file=@$WAVFILE" http://127.0.0.1:8000/v1/audio/transcriptions)

# Extract text from JSON response
TEXT=$(echo "$RESPONSE" | jq -r '.text // empty')

if [ -z "$TEXT" ]; then
    # Transcription failed
    keyboard-reset
    exit 1
fi

# Get relative filename for TSV
RELATIVE_FILE=$(basename $(dirname "$WAVFILE"))/$(basename "$WAVFILE")

# Append to TSV file
echo -e "$RELATIVE_FILE\t$TEXT" >> "$TSV_FILE"

# Set A key green (success)
keyboard-notify --color 0,255,0 A
sleep 0.3

# Type the text
wtype "$TEXT"

# Reset keyboard
keyboard-reset
